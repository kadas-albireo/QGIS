name: MinGW Build
on: [push]

jobs:
  build:
    name: MinGW build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: build kadas2-mingw-buildenv
        run: docker build -t kadas2-mingw-buildenv ms-windows
      - name: Version number
        id: version_number
        run: |
          if [ ${{ startsWith(github.ref, 'refs/tags/') }} = true ]; then
            VERSION=$(basename ${{ github.ref }})
          else
            VERSION=ci-latest-$(basename ${{ github.ref }})
            PREV_RELEASE=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$VERSION | jq -r .url)
            # Reset ci-latest tag
            git config --global user.email "ci@github.com"
            git config --global user.name "Github CI"
            # Workaround for "could not read Username for 'https://github.com': No such device or address"
            git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git
            git tag -d $VERSION || true
            git push origin :$VERSION || true
            git tag -m $VERSION $VERSION
            git push --tags
          fi
          echo "##[set-output name=version;]$VERSION"
          echo "##[set-output name=prev_release;]$PREV_RELEASE"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build application
        run: docker run -v $PWD:/workspace kadas2-mingw-buildenv ms-windows/mingwbuild.sh x86_64 nodebug 4
      - name: Create portable zip
        run: |
          distroot=build_mingw64/dist/usr/x86_64-w64-mingw32/sys-root/mingw
          debugroot=dist_debug
          for file in $(find $distroot -name '*.debug' \( -type l -or -type f \)); do
              dest=${file/$distroot/$debugroot}
              mkdir -p "$(dirname $dest)"
              sudo mv "$file" "$dest"
          done
          sudo mv $distroot QGIS-Portable
          zip -r qgis-portable-win64.zip QGIS-Portable
          (cd $debugroot && zip -r - *) > qgis-portable-win64-debugsym.zip
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          # We use a personal access token, because GITHUB_CI_TOKEN is valid only for one hour
          GITHUB_TOKEN: ${{ secrets.GITHUB_PRIVATE_TOKEN }}
        with:
          tag_name: ${{ steps.version_number.outputs.version }}
          release_name: CI Build
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_PRIVATE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./qgis-portable-win64.zip
          asset_name: qgis-portable-win64.zip
          asset_content_type: application/zip
      - name: Upload debugsym release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_PRIVATE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./qgis-portable-win64-debugsym.zip
          asset_name: qgis-portable-win64-debugsym.zip
          asset_content_type: application/zip
      - name: Delete previous release
        run: |
          curl -s -H "authorization: Bearer ${{ secrets.GITHUB_PRIVATE_TOKEN }}" \
               -X DELETE ${{ steps.version_number.outputs.prev_release }}
        if: steps.version_number.outputs.prev_release != ''
